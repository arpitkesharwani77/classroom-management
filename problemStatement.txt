Problem Statement:
You have been tasked with building a simple Classroom Management web application. The goal is to create RESTful endpoints for managing classes, students, and enrollment, using Node.js, Express, and MongoDB (with Mongoose).

Requirements & Specifications
HTTP & Express
Set up an Express server that listens on a configurable port (e.g., 3000).
Define RESTful routes (e.g., GET, POST, PUT, DELETE) to manage the applicationâ€™s resources (classes, students, enrolments).
Structure routes logically (e.g., /api/classes, /api/students).
Express Middlewares
Logging Middleware: Implement a simple logging middleware that logs the method, URL, and timestamp of each incoming request.
Error-Handling Middleware: Create a global error handler to capture and format error responses.
Validation Middleware: (Optional enhancement) Validate incoming request data (e.g., check if required fields are present for creating a class).
MongoDB & Mongoose
Connect your application to a MongoDB database.
Create Mongoose models/schemas for:
Class: (e.g., name, subject, teacherName, startDate, endDate)
Student: (e.g., firstName, lastName, email)
Enrolment or use references within Class or Student models.
Demonstrate basic CRUD (Create, Read, Update, Delete) operations using Mongoose.
Core Features
Create a Class
Endpoint to create a new class (e.g., POST /api/classes).
Store class details in MongoDB via Mongoose.
List Classes
Endpoint to list all classes (e.g., GET /api/classes).
Include support for filtering or pagination (optional).
Create a Student
Endpoint to register a student (e.g., POST /api/students).
Validate required student fields and return appropriate errors.
Enroll a Student in a Class
Endpoint to add a student to a class (could be POST /api/classes/:classId/enroll or a dedicated /api/enrollments).
Show usage of references/relations in Mongoose.
List Students in a Class
Endpoint to retrieve all students enrolled in a specific class (e.g., GET /api/classes/:classId/students).
Error Handling & Edge Cases
Handle cases where a requested resource (class or student) does not exist.
Return appropriate HTTP status codes (e.g., 404 for Not Found, 400 for Bad Request).
Use the global error-handling middleware to return consistent error responses.
Enhancements
Authentication & Authorisation: Restrict certain routes to specific roles (e.g., only a teacher can create a class).
Search & Pagination: Allow searching by class name or teacher name; implement pagination for large datasets.
Attendance Tracking: Extend the schema to track student attendance or assignment submissions.
Deliverables
Source Code (gitHub repo):
A Node.js project with a structured folder layout (controllers, routes, models, etc.).
Proper usage of Express routers and middlewares.
A .env or configuration system for environment variables (e.g., MongoDB connection string, server port).
README File:
Clear instructions on how to install dependencies, and start the server.
Brief documentation of the available endpoints and sample requests/responses.